type VolunteerNum {
  max: Int!
  min: Int!
}

type EventIntroductions {
  brief: String!
  detail: [String!]!
  relatedPageUrl: String
}

type Location {
  locationName: String!
  address: String!
  meetPointName: String
}

type EventDatetime {
  beginningDate: AWSDate!
  beginningTime: AWSTime!
  endingDate: AWSDate!
  endingTime: AWSTime!
}

type ApplyDate {
  beginningDate: AWSDate!
  endingDate: AWSDate!
}

type UserEvents {
  applied: [String!]
  followed: [String!]
}

type Event @model @auth(rules: [{allow: public}]) {
  id: ID!
  hostUserId: String!
  type: String!
  name: String!
  longterm: Boolean!
  location: Location!
  eventDatetime: [EventDatetime!]
  Event2Users: [User] @manyToMany(relationName: "EventUser")
  applyDate: ApplyDate!
  introduction: EventIntroductions
  volunteerNum: VolunteerNum
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  oauthID: String!
  oauthProvider: String!
  name: String!
  email: AWSEmail!
  nationalID: String!
  dateOfBirth: AWSDate!
  phoneNumber: AWSPhone!
  events: UserEvents
  User2Events: [Event] @manyToMany(relationName: "EventUser")
}
 